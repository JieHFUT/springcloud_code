server:
  port: 80

spring:
  application:
    name: cloud-consumer-openfeign-order
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true #优先使用服务ip进行注册
        service-name: ${spring.application.name}
    # 消费者的超时配置
    openfeign:
      client:
        config:
          # 全局超时配置
          default:
            #连接超时时间 3 秒
            connectTimeout: 3000
            #读取超时时间
            readTimeout: 3000
          # 指定超时配置：指定是哪一个微服务，指定优先
          cloud-payment-service:
            #连接超时时间
            connectTimeout: 20000
            #读取超时时间
            readTimeout: 20000
      # 开始进行 Apache HttpClient5 配置（对 openfeign 的原生的代替）
      httpclient:
        hc5:
          enabled: true
      # 开启 openfeign 的（请求、响应）的压缩功能
      compression:
        request:
          enabled: true
          min-request-size: 2048 #最小触发压缩的大小
          mime-types: text/xml,application/xml,application/json #触发压缩数据类型
        response:
          enabled: true
      # 开启 circuitbreaker 断路器和分组激活 spring.cloud.openfeign.circuitbreaker.enabled
      circuitbreaker:
        enabled: true
        group:
          enabled: true # 没开分组永远不用分组的配置。精确优先、分组次之(开了分组)、默认最后




# 开启 feign 日志以什么级别监控哪一个接口
logging:
  level:
    com.jiehfut.cloud.apis.PayFeignApi: debug



# 断路器： Resilience4j 实现 CircuitBreaker 规范
# 按照次数：COUNT_BASED 的例子
# 断路器原本自己有一套默认配置，这里使用自己的配置进行覆盖
#  6次访问中当执行方法的失败率达到 50% 时CircuitBreaker将进入开启OPEN状态(保险丝跳闸断电)拒绝所有请求。
#  等待5秒后，CircuitBreaker 将自动从开启OPEN状态过渡到半开HALF_OPEN状态，允许一些请求通过以测试服务是否恢复正常。
#  如还是异常CircuitBreaker 将重新进入开启OPEN状态；如正常将进入关闭CLOSE闭合状态恢复正常处理请求。
resilience4j:
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 50 #设置 50% 的调用失败时打开断路器，超过失败请求百分⽐ CircuitBreaker变为 OPEN状态。
        slidingWindowType: COUNT_BASED # 滑动窗口的类型（按照计数统计）
        slidingWindowSize: 6 #滑动窗⼝的⼤⼩配置 COUNT_BASED 表示 6个请求，如果是配置 TIME_BASED 表示 6秒
        minimumNumberOfCalls: 6 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。如果 minimumNumberOfCalls为10，则必须最少记录10个样本，然后才能计算失败率。如果只记录了9次调用，即使所有9次调用都失败，断路器也不会开启。
        automaticTransitionFromOpenToHalfOpenEnabled: true # 是否启用自动从开启状态过渡到半开状态，默认值为true。如果启用，CircuitBreaker将自动从开启状态过渡到半开状态，并允许一些请求通过以测试服务是否恢复正常
        waitDurationInOpenState: 5s #从 OPEN 到 HALF_OPEN 状态需要等待的时间
        permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为 10。在半开状态下，CircuitBreaker将允许最多permittedNumberOfCallsInHalfOpenState个请求通过，如果其中有任何一个请求失败，CircuitBreaker将重新进入开启状态。
        recordExceptions:
          - java.lang.Exception
    instances:
      cloud-payment-service: # 这个服务指定使用上面的配置
        baseConfig: default

# 断路器： Resilience4j 实现 CircuitBreaker 规范
# 按照时间：TIME_BASED 的例子：成功响应，但是响应时间超过 slowCallDurationThreshold 为慢调用
#                          如果慢调用比例占比超过 30% => 熔断
#                          如果慢调用 + 异常响应占比超过 50% => 熔断
# resilience4j:
#   timelimiter:
#     configs:
#       default:
#         timeout-duration: 10s #神坑的位置，timelimiter 默认限制远程 1s，超于 1s就超时异常，配置了降级，就走降级逻辑
#   circuitbreaker:
#     configs:
#       default:
#         failureRateThreshold: 50 #设置 50% 的调用失败时打开断路器，超过失败请求百分⽐ CircuitBreaker变为OPEN状态。
#         slowCallDurationThreshold: 2s #慢调用时间阈值，高于这个阈值的视为慢调用并增加慢调用比例。
#         slowCallRateThreshold: 30 # 慢调用百分比峰值，断路器把调用时间⼤于slowCallDurationThreshold，视为慢调用，当慢调用比例高于阈值，断路器打开，并开启服务降级
#         slidingWindowType: TIME_BASED # 滑动窗口的类型
#         slidingWindowSize: 2 # 滑动窗口的大小配置，配置 TIME_BASED表示2秒
#         minimumNumberOfCalls: 2 #断路器计算失败率或慢调用率之前所需的最小样本(每个滑动窗口周期)。
#         permittedNumberOfCallsInHalfOpenState: 2 #半开状态允许的最大请求数，默认值为10。
#         waitDurationInOpenState: 5s #从OPEN到HALF_OPEN状态需要等待的时间
#         recordExceptions:
#           - java.lang.Exception
#     instances:
#       cloud-payment-service:
#         baseConfig: default


#### resilience4j bulkhead 的例子（隔离机制-信号量仓壁）
  # 这个是基于信号量舱壁
  bulkhead:
    configs:
      default:
        maxConcurrentCalls: 2 # 隔离允许并发线程执行的最大数量
        maxWaitDuration: 1s # 当达到并发调用数量时，新的线程的阻塞时间，我只愿意等待1秒，过时不候进舱壁兜底 fallback
    instances:
      cloud-payment-service:
        baseConfig: default
  timelimiter:
    configs:
      default:
        timeout-duration: 20s # timelimiter默认限制远程1s，超过报错不好演示效果所以加上 20秒
  # 这个是基于线程池舱壁（2个）
  thread-pool-bulkhead:
    configs:
      default:
        core-thread-pool-size: 1 #
        max-thread-pool-size: 1 # 线程池的数量
        queue-capacity: 1 # 等待队列的长度
    instances:
      cloud-payment-service:
        baseConfig: default
  # 配置限流的数据
  ratelimiter:
    configs:
      default:
        limitForPeriod: 2 #在一次刷新周期时间内，允许执行的最大请求数
        limitRefreshPeriod: 1s # 限流器每隔 limitRefreshPeriod 刷新一次，将允许处理的最大请求数量重置为 limitForPeriod
        timeout-duration: 1 # 线程等待权限的默认等待时间
    instances:
      cloud-payment-service:
        baseConfig: default

# zipkin图形展现地址和采样率设置 micrometer-tracing 搭建链路监控的配置
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 #采样率默认为0.1(0.1就是10次只能有一次被记录下来)，值越大收集越及时。
server:
  port: 9527

spring:
  application:
    name: cloud-gateway #以微服务注册进consul或nacos服务列表内
  cloud:
    consul: #配置consul地址
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}

    gateway:
      # 网关的核心之一 => route（路由） - 进行路径匹配
      routes:
        - id: pay_routh1 # pay_routh1                # 路由的 ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          # uri: http://localhost:8001                # 匹配后提供服务的路由地址（问题是出现路径写死问题，一般不止一个微服务提供者）
          uri: lb://cloud-payment-service
          predicates:
            # 网关的核心之二 - 测试通过网关的 断言（predicates）
            - Path=/pay/gateway/get/**              # 断言，路径相匹配的进行路由（true 可以访问）
            # 下面是通过 predicate 进行 After-Route-Predicate 断言（表示在该时间之后网关才会放行请求）
            - After=2025-01-21T11:06:43.305109100+08:00[Asia/Shanghai] # 请求需要在此之后才能被放行
            - Cookie=username,jieHFUT # 请求中需要携带该 cookie
            - Header=X-Request-Id, \d+ # 请求头需要携带该信息，根据正则表达式进行匹配
            - Host=**.baidu.com,**.jieHFUT.cloud # 根据域名进行匹配
            - Query=colour, green # 请求中携带参数，参数值可以是正则表达式
            - RemoteAddr=192.168.182.39/24 # 外部访问我的IP限制，最大跨度不超过 32，目前是 1~24它们是 CIDR 表示法。
            - Method=GET,POST # 限制请求方法
            # 自定义断言工厂
            - name: My
              args:
                requestRank: gold


        - id: pay_routh2 # pay_routh2                # 路由的 ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          # uri: http://localhost:8001                # 匹配后提供服务的路由地址（问题是出现路径写死问题，一般不止一个微服务提供者）
          uri: lb://cloud-payment-service
          predicates:
            - Path=/pay/gateway/info/**             # 断言，路径相匹配的进行路由（true 可以访问）


        # 网关的核心之三 - 测试通过网关的 过滤器（filter）对控制层方法进行控制（8001 网关控制器第三个方法）
        - id: pay_routh3 # pay_routh3
          uri: lb://cloud-payment-service                #匹配后提供服务的路由地址
          predicates:
            # - Path=/pay/gateway/filter/**              # 断言，路径相匹配的进行路由
            # - Path=/gateway/filter/**                  # 匹配 PrefixPath
            - Path=/replace/next/is/{segment}               # 匹配 SetPath
          filters:
            - AddRequestHeader=X-Request-jieHFUT1, jieHFUTValue1  # 添加请求头 k-v，若一头含有多参则重写一行设置
            - AddRequestHeader=X-Request-jieHFUT2, jieHFUTValue2
            - RemoveRequestHeader=sec-fetch-site # 删除指定的请求头信息
            - SetRequestHeader=sec-fetch-mode, update-jieHFUT # 更新指定的请求头信息
            - AddRequestParameter=customerId,9527001 # 新增请求参数 Parameter：k-v，如果请求中携带该参数会覆盖 9527001
            - RemoveRequestParameter=customerName   # 删除 url请求参数 customerName，你传递过来也是 null
            - AddResponseHeader=X-Response-jieHFUT, jieHFUTResponse # 新增响应的参数 X-Response-jieHFUT
            - SetResponseHeader=Date,2099-11-11  # 设置响应头 Date 值为 2099-11-11
            - RemoveResponseHeader=Content-Type # 将响应默认自带 Content-Type 回应属性删除
            # - PrefixPath=/pay # 添加统一前缀，用于保护真实请求路径 /pay + path ---- 请求的地址变成 GET /gateway/filter HTTP/1.1
            - SetPath=/pay/gateway/{segment} # 进行路由占位替换，访问 /replace/next/is/filter，网关请求 /pay/gateway/filter
            # - RedirectTo=302, https://www.baidu.com/ # 访问 http://localhost:9527/pay/gateway/filter 跳转到 https://www.baidu.com/
            # 设置自定义的单一过滤的工厂（设置请求参数中必需携带参数 jieHFUT=...）
            - My=jieHFUT